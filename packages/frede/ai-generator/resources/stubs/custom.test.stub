<?php

namespace {{Namespace}};

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use {{ModelNamespace}};
use PHPUnit\Framework\Attributes\Test;
// PASSO 6.1: Importa os models relacionados
{{RelatedModelsUse}}

class {{ClassName}} extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function a_listagem_de_recursos_funciona()
    {
        {{ModelName}}::factory(3)->create();
        $response = $this->getJson('/api/{{ApiRouteName}}');
        $response->assertStatus(200)
                 ->assertJsonCount(3);
    }

    #[Test]
    public function a_criacao_de_recurso_funciona()
    {
        // PASSO 6.1: Cria as dependências primeiro (ex: o User)
        {{DependentFactories}}

        $data = [
            {{PostData}}
        ];

        $response = $this->postJson('/api/{{ApiRouteName}}', $data);
                 
        $response->assertStatus(201)
                 ->assertJsonFragment({{AssertData}});
                 
        $this->assertDatabaseHas('{{DatabaseTableName}}', [
            {{AssertData}}
        ]);
    }
    
    #[Test]
    public function a_validacao_falha_sem_um_campo_obrigatorio()
    {
        // PASSO 6.1: Cria as dependências (necessárias para o 'user_id' não falhar)
        {{DependentFactories}}

        $data = [
            {{PostData}}
        ];
        
        // Remove um campo obrigatório para forçar o erro
        unset($data['{{ValidationColumn}}']); 

        $response = $this->postJson('/api/{{ApiRouteName}}', $data);

        $response->assertStatus(422)
                 ->assertJsonValidationErrors('{{ValidationColumn}}');
    }
    
    #[Test]
    public function a_visualizacao_de_recurso_funciona()
    {
        $model = {{ModelName}}::factory()->create();
        
        $response = $this->getJson('/api/{{ApiRouteName}}/' . $model->id);
                         
        $response->assertStatus(200)
                 ->assertJsonFragment(['id' => $model->id]);
    }
}